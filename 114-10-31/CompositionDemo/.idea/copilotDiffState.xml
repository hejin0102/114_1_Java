<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/AccountTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/AccountTest.java" />
              <option name="originalContent" value="// 檔案路徑: c:\Users\m306\Desktop\114_1_Java\114-10-31\CompositionDemo\src\AccountTest.java&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;&#10;public class AccountTest {&#10;    public static void main(String[] args) {&#10;        List&lt;Account&gt; customers = new ArrayList&lt;&gt;(); // 儲存客戶帳戶的清單&#10;        Account acc1 = new Account(&quot;A001&quot;, &quot;Alice&quot;, 5000);&#10;        addCustomer(customers, acc1);&#10;        Account acc2 = new Account(&quot;A002&quot;, &quot;Bob&quot;, 3000);&#10;        addCustomer(customers, acc2);&#10;        Account acc3 = new Account(&quot;A003&quot;, &quot;Charlie&quot;, -100);&#10;        addCustomer(customers,  acc3);&#10;&#10;        operation(customers);&#10;        // 顯示所有客戶帳戶資訊&#10;//        System.out.println(&quot;\n所有位客戶帳戶資訊:&quot;);&#10;//        printCustomerAccounts(customers);&#10;    }&#10;&#10;    public static void operation(List&lt;Account&gt; customers) {&#10;        Scanner scanner = new Scanner(System.in);&#10;        Account selectedAccount;&#10;        while (true) {&#10;            menu();&#10;            System.out.print(&quot;請選擇功能(1-5): &quot;);&#10;            int choice = scanner.nextInt();&#10;            scanner.nextLine(); // 清除換行符號&#10;            switch (choice) {&#10;                case 1:&#10;                    System.out.print(&quot;輸入帳戶號碼: &quot;);&#10;                    String accNum = scanner.nextLine();&#10;                    System.out.print(&quot;輸入持有人名稱: &quot;);&#10;                    String ownerName = scanner.nextLine();&#10;                    System.out.print(&quot;輸入初始餘額: &quot;);&#10;                    double initialBalance = scanner.nextDouble();&#10;                    Account newAccount = new Account(accNum, ownerName, initialBalance);&#10;                    addCustomer(customers, newAccount);&#10;                    break;&#10;                case 2:&#10;                    System.out.print(&quot;輸入要查詢的帳戶號碼: &quot;);&#10;                    String searchAccNum = scanner.nextLine();&#10;                    selectedAccount = customerInAction(customers, searchAccNum);&#10;                    printCustomerInfo(selectedAccount);&#10;&#10;                    break;&#10;&#10;                case 3:&#10;                    System.out.println(&quot;\n所有位客戶帳戶資訊:&quot;);&#10;                    printCustomerAccounts(customers);&#10;                    break;&#10;                case 4:&#10;                    System.out.print(&quot;輸入要刪除的帳戶號碼: &quot;);&#10;                    String deleteAccNum = scanner.nextLine();&#10;                    deleteCustomer(customers, deleteAccNum);&#10;                    break;&#10;                case 5:&#10;                    System.out.println(&quot;離開系統，謝謝使用!&quot;);&#10;                    return;&#10;                default:&#10;                    System.out.println(&quot;無效的選擇，請重新輸入&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    public static Account customerInAction(List&lt;Account&gt; customers, String accountNumber) {&#10;        for (Account account : customers) {&#10;            if (account.getAccountNumber().equals(accountNumber)) {&#10;                return account;&#10;            }&#10;        }&#10;        System.out.println(&quot;找不到指定的帳戶號碼: &quot; + accountNumber);&#10;        return null;&#10;    }&#10;&#10;    public static void addCustomer(List&lt;Account&gt; customers, Account newAccount) {&#10;        customers.add(newAccount);&#10;        System.out.println(&quot;新增客戶成功: &quot; + newAccount.getAccountNumber());&#10;    }&#10;&#10;    public static void deleteCustomer(List&lt;Account&gt; customers, String accountNumber) {&#10;        for (int i = 0; i &lt; customers.size(); i++) {&#10;            if (customers.get(i).getAccountNumber().equals(accountNumber)) {&#10;                Account removedAccount = customers.remove(i);&#10;                System.out.println(&quot;刪除客戶成功: &quot; + removedAccount.getAccountNumber() + &quot; (&quot; + removedAccount.getOwnerName() + &quot;)&quot;);&#10;                return;&#10;            }&#10;        }&#10;        System.out.println(&quot;找不到指定的帳戶號碼: &quot; + accountNumber);&#10;    }&#10;&#10;    public static void printCustomerAccounts(List&lt;Account&gt; customers) {&#10;        for (Account customer : customers) {&#10;            printCustomerInfo(customer);&#10;        }&#10;    }&#10;&#10;    public static void printCustomerInfo(Account account) {&#10;        if (account == null) {&#10;            System.out.println(&quot;無法列印帳戶資訊，帳戶不存在&quot;);&#10;            return;&#10;        }&#10;        System.out.println(&quot;帳戶號碼: &quot; + account.getAccountNumber() +&#10;                &quot;, 持有人: &quot; + account.getOwnerName() +&#10;                &quot;, 餘額: &quot; + account.getBalance());&#10;    }&#10;&#10;    // 功能選單 (1) 新增客戶 (2) 列印指定客戶帳戶資訊 (3) 顯示所有客戶帳戶資訊 (4) 刪除客戶帳戶 (5) 離開&#10;    public static void menu() {&#10;        System.out.println(&quot;功能選單:&quot;);&#10;        System.out.println(&quot;1. 新增客戶&quot;);&#10;        System.out.println(&quot;2. 列印指定客戶帳戶資訊&quot;);&#10;        System.out.println(&quot;3. 顯示所有客戶帳戶資訊&quot;);&#10;        System.out.println(&quot;4. 刪除客戶帳戶&quot;);&#10;        System.out.println(&quot;5. 離開&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// 檔案路徑: c:\Users\m306\Desktop\114_1_Java\114-10-31\CompositionDemo\src\AccountTest.java&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;&#10;public class AccountTest {&#10;    public static void main(String[] args) {&#10;        List&lt;Account&gt; customers = new ArrayList&lt;&gt;(); // 儲存客戶帳戶的清單&#10;        Account acc1 = new Account(&quot;A001&quot;, &quot;Alice&quot;, 5000);&#10;        addCustomer(customers, acc1);&#10;        Account acc2 = new Account(&quot;A002&quot;, &quot;Bob&quot;, 3000);&#10;        addCustomer(customers, acc2);&#10;        Account acc3 = new Account(&quot;A003&quot;, &quot;Charlie&quot;, -100);&#10;        addCustomer(customers,  acc3);&#10;&#10;        operation(customers);&#10;    }&#10;&#10;    public static void operation(List&lt;Account&gt; customers) {&#10;        Scanner scanner = new Scanner(System.in);&#10;        Account selectedAccount;&#10;        while (true) {&#10;            menu();&#10;            System.out.print(&quot;請選擇功能(1-7): &quot;);&#10;            int choice = scanner.nextInt();&#10;            scanner.nextLine(); // 清除換行符號&#10;            switch (choice) {&#10;                case 1: // 新增客戶&#10;                    System.out.print(&quot;輸入帳戶號碼: &quot;);&#10;                    String accNum = scanner.nextLine();&#10;                    System.out.print(&quot;輸入持有人名稱: &quot;);&#10;                    String ownerName = scanner.nextLine();&#10;                    System.out.print(&quot;輸入初始餘額: &quot;);&#10;                    double initialBalance = scanner.nextDouble();&#10;                    scanner.nextLine(); // 清除換行符號&#10;                    Account newAccount = new Account(accNum, ownerName, initialBalance);&#10;                    addCustomer(customers, newAccount);&#10;                    break;&#10;                case 2: // 存款&#10;                    System.out.print(&quot;輸入要存款的帳戶號碼: &quot;);&#10;                    String depAccNum = scanner.nextLine();&#10;                    selectedAccount = customerInAction(customers, depAccNum);&#10;                    if (selectedAccount == null) break;&#10;                    System.out.print(&quot;輸入存款金額: &quot;);&#10;                    double depAmount = scanner.nextDouble();&#10;                    scanner.nextLine();&#10;                    try {&#10;                        selectedAccount.deposit(depAmount);&#10;                        System.out.println(&quot;存款成功，餘額: &quot; + selectedAccount.getBalance());&#10;                    } catch (IllegalArgumentException e) {&#10;                        System.out.println(&quot;存款失敗: &quot; + e.getMessage());&#10;                    }&#10;                    break;&#10;                case 3: // 提款&#10;                    System.out.print(&quot;輸入要提款的帳戶號碼: &quot;);&#10;                    String witAccNum = scanner.nextLine();&#10;                    selectedAccount = customerInAction(customers, witAccNum);&#10;                    if (selectedAccount == null) break;&#10;                    System.out.print(&quot;輸入提款金額: &quot;);&#10;                    double witAmount = scanner.nextDouble();&#10;                    scanner.nextLine();&#10;                    try {&#10;                        selectedAccount.withdraw(witAmount);&#10;                        System.out.println(&quot;提款成功，餘額: &quot; + selectedAccount.getBalance());&#10;                    } catch (IllegalArgumentException e) {&#10;                        System.out.println(&quot;提款失敗: &quot; + e.getMessage());&#10;                    }&#10;                    break;&#10;                case 4: // 列印指定客戶&#10;                    System.out.print(&quot;輸入要查詢的帳戶號碼: &quot;);&#10;                    String searchAccNum = scanner.nextLine();&#10;                    selectedAccount = customerInAction(customers, searchAccNum);&#10;                    printCustomerInfo(selectedAccount);&#10;                    break;&#10;                case 5: // 顯示所有&#10;                    System.out.println(&quot;\n所有客戶帳戶資訊:&quot;);&#10;                    printCustomerAccounts(customers);&#10;                    break;&#10;                case 6: // 刪除&#10;                    System.out.print(&quot;輸入要刪除的帳戶號碼: &quot;);&#10;                    String deleteAccNum = scanner.nextLine();&#10;                    deleteCustomer(customers, deleteAccNum);&#10;                    break;&#10;                case 7: // 離開&#10;                    System.out.println(&quot;離開系統，謝謝使用!&quot;);&#10;                    scanner.close();&#10;                    return;&#10;                default:&#10;                    System.out.println(&quot;無效的選擇，請重新輸入&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    public static Account customerInAction(List&lt;Account&gt; customers, String accountNumber) {&#10;        for (Account account : customers) {&#10;            if (account.getAccountNumber().equals(accountNumber)) {&#10;                return account;&#10;            }&#10;        }&#10;        System.out.println(&quot;找不到指定的帳戶號碼: &quot; + accountNumber);&#10;        return null;&#10;    }&#10;&#10;    public static void addCustomer(List&lt;Account&gt; customers, Account newAccount) {&#10;        customers.add(newAccount);&#10;        System.out.println(&quot;新增客戶成功: &quot; + newAccount.getAccountNumber());&#10;    }&#10;&#10;    public static void deleteCustomer(List&lt;Account&gt; customers, String accountNumber) {&#10;        for (int i = 0; i &lt; customers.size(); i++) {&#10;            if (customers.get(i).getAccountNumber().equals(accountNumber)) {&#10;                Account removedAccount = customers.remove(i);&#10;                System.out.println(&quot;刪除客戶成功: &quot; + removedAccount.getAccountNumber() + &quot; (&quot; + removedAccount.getOwnerName() + &quot;)&quot;);&#10;                return;&#10;            }&#10;        }&#10;        System.out.println(&quot;找不到指定的帳戶號碼: &quot; + accountNumber);&#10;    }&#10;&#10;    public static void printCustomerAccounts(List&lt;Account&gt; customers) {&#10;        for (Account customer : customers) {&#10;            printCustomerInfo(customer);&#10;        }&#10;    }&#10;&#10;    public static void printCustomerInfo(Account account) {&#10;        if (account == null) {&#10;            System.out.println(&quot;無法列印帳戶資訊，帳戶不存在&quot;);&#10;            return;&#10;        }&#10;        System.out.println(&quot;帳戶號碼: &quot; + account.getAccountNumber() +&#10;                &quot;, 持有人: &quot; + account.getOwnerName() +&#10;                &quot;, 餘額: &quot; + account.getBalance());&#10;    }&#10;&#10;    // 功能選單&#10;    public static void menu() {&#10;        System.out.println(&quot;功能選單:&quot;);&#10;        System.out.println(&quot;1. 新增客戶&quot;);&#10;        System.out.println(&quot;2. 存款&quot;);&#10;        System.out.println(&quot;3. 提款&quot;);&#10;        System.out.println(&quot;4. 列印指定客戶帳戶資訊&quot;);&#10;        System.out.println(&quot;5. 顯示所有客戶帳戶資訊&quot;);&#10;        System.out.println(&quot;6. 刪除客戶帳戶&quot;);&#10;        System.out.println(&quot;7. 離開&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Date.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Date.java" />
              <option name="originalContent" value="// 檔案路徑: c:\Users\m306\Desktop\114_1_Java\114-10-31\CompositionDemo\src\Date.java&#10;public class Date {&#10;    private int month; // 月份 1-12&#10;    private int day; // 日期 1-31（視月份而定）&#10;    private int year; // 年份（任何年）&#10;&#10;    private static final int[] daysPerMonth =&#10;            {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};&#10;&#10;    // 建構子：檢查給定年份下月份與日期是否正確&#10;    public Date(int month, int day, int year) {&#10;        // 檢查月份是否在範圍內&#10;        if (month &lt;= 0 || month &gt; 12) {&#10;            throw new IllegalArgumentException(&#10;                    &quot;月份 (&quot; + month + &quot;) 必須為 1-12&quot;);&#10;        }&#10;&#10;        // 檢查日期是否在該月份的範圍內&#10;        if (day &lt;= 0 ||&#10;                (day &gt; daysPerMonth[month] &amp;&amp; !(month == 2 &amp;&amp; day == 29))) {&#10;            throw new IllegalArgumentException(&quot;日期 (&quot; + day +&#10;                    &quot;) 超出指定月份和年份的範圍&quot;);&#10;        }&#10;&#10;        // 若為2月29日，檢查是否為閏年&#10;        if (month == 2 &amp;&amp; day == 29 &amp;&amp; !(year % 400 == 0 ||&#10;                (year % 4 == 0 &amp;&amp; year % 100 != 0))) {&#10;            throw new IllegalArgumentException(&quot;日期 (&quot; + day +&#10;                    &quot;) 超出指定月份和年份的範圍&quot;);&#10;        }&#10;&#10;        this.month = month;&#10;        this.day = day;&#10;        this.year = year;&#10;&#10;        //System.out.printf(&quot;Date 物件建構完成，日期為 %s%n&quot;, this);&#10;    }&#10;&#10;    // 回傳字串格式為 月/日/年&#10;    public String toString() {&#10;        return String.format(&quot;%d/%d/%d&quot;, month, day, year);&#10;    }&#10;}" />
              <option name="updatedContent" value="// 檔案路徑: c:\Users\m306\Desktop\114_1_Java\114-10-31\CompositionDemo\src\Date.java&#10;public class Date {&#10;    private final int month; // 月份 1-12&#10;    private final int day; // 日期 1-31（視月份而定）&#10;    private final int year; // 年份（任何年）&#10;&#10;    private static final int[] daysPerMonth =&#10;            {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};&#10;&#10;    // 建構子：檢查給定年份下月份與日期是否正確&#10;    public Date(int month, int day, int year) {&#10;        // 檢查月份是否在範圍內&#10;        if (month &lt;= 0 || month &gt; 12) {&#10;            throw new IllegalArgumentException(&#10;                    &quot;月份 (&quot; + month + &quot;) 必須為 1-12&quot;);&#10;        }&#10;&#10;        // 檢查日期是否在該月份的範圍內&#10;        if (day &lt;= 0 ||&#10;                (day &gt; daysPerMonth[month] &amp;&amp; !(month == 2 &amp;&amp; day == 29))) {&#10;            throw new IllegalArgumentException(&quot;日期 (&quot; + day +&#10;                    &quot;) 超出指定月份和年份的範圍&quot;);&#10;        }&#10;&#10;        // 若為2月29日，檢查是否為閏年&#10;        if (month == 2 &amp;&amp; day == 29 &amp;&amp; !(year % 400 == 0 ||&#10;                (year % 4 == 0 &amp;&amp; year % 100 != 0))) {&#10;            throw new IllegalArgumentException(&quot;日期 (&quot; + day +&#10;                    &quot;) 超出指定月份和年份的範圍&quot;);&#10;        }&#10;&#10;        this.month = month;&#10;        this.day = day;&#10;        this.year = year;&#10;&#10;        //System.out.printf(&quot;Date 物件建構完成，日期為 %s%n&quot;, this);&#10;    }&#10;&#10;    // 回傳字串格式為 月/日/年&#10;    public String toString() {&#10;        return String.format(&quot;%d/%d/%d&quot;, month, day, year);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>